
))

(LABEL MC.evalquote (LAMBDA (fn;x)
	apply(fn;x;NIL)))

(LABEL MC.apply (LAMBDA (fn;x;a)
	(atom(fn) ->
		(eq(fn;CAR) -> caar(x);
		eq(fn;CDR) -> cdar(x);
		eq(fn;CONS) -> cons(car(x);cadr(x));
		eq(fn;ATOM) -> atom(car(x));
		eq(fn;EQ) -> eq(car(x);cadr(x));
		T -> apply(eval(fn;a);x;a));
	eq(car(fn);LAMBDA) -> eval(caddr(fn);parlis(cadr(fn);x;a));
	eq(car(fn);LABEL) -> apply(caddr(fn);x;cons(cons(cadr(fn);
			caddr(fn));a)))))

(LABEL MC.eval (LAMBDA (e;a)
	(atom(e) -> cdr(assoc(e;a));
	atom(car(e)) ->
		(eq(car(e),QUOTE) -> cadr(e);
		eq(car(e);COND) -> evcon(cdr(e);a);
		T -> apply(car(e);evlis(cdr(e);a);a));
	T -> apply(car(e);evlis(cdr(e);a);a))))

(LABEL MC.evcon (LAMBDA (c;a)
	(eval(caar(c);a) -> eval(cadar(c);a);
	T -> evcon(cdr(c);a))))

(LABEL MC.evlis (LAMBDA (m;a)
	(null(m) -> NIL;
	T -> cons(eval(car(m);a);evlis(cdr(m);a)))))

(LABEL MC.equal (LAMBDA (x;y)
	(atom(x) -> (atom(y) -> eq(x;y); T -> F);
		equal (car (x);car(y)) -> equal (cdr(x);cdr(y));
		T -> F)))

(LABEL MC.subst (LAMBDA (x;y;z)
	(equal(y;z) -> x;atom(z) -> z;T -> cons(subst
	(x;y;car(z));subst(x;y;cdr(z))))))

(LABEL MC.append (LAMBDA (x;y)
	(null(x) -> y;T -> cons(car(x);append(cdr(x);y)))))

(LABEL MC.member (LAMBDA (x;y)
	(null(y) -> F;
	equal(x;car(y)) -> T;
	T -> member(x;cdr(y)))))

(LABEL MC.pairlis  (LAMBDA (x; y; a)
	(null(x) -> a; T -> cons(cons(car(x); car(y));
	pairlis(cdr(x); cdr (y); a)))))

(LABEL MC.assoc (LAMBDA (x;a)
	(equal(caar(a);x) -> car(a);T -> assoc(x;cdr(a)))))

(LABEL MC.sub2 (LAMBDA (a;z)
	(null(a) -> z;eq(caar(a);z)-cdar(a);T ->
	sub2(cdr(a);z))))

(LABEL MC.sublis (LAMBDA (a;y)
	(atom(y) -> sub2(a;y);T -> Cons(sublis(a;car(y));
	sublis(a;cdr(y))))

